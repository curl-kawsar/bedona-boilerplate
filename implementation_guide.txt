Next.js Boilerplate Implementation Guide

This is a modern Next.js boilerplate with authentication, Shadcn UI components, and clean architecture. Here's how everything is structured and how to implement new features:

Project Structure
The project follows a clean architecture with separate concerns:
- app/ - Contains all pages and layouts
- components/ - Reusable components organized by feature
- services/ - API and business logic
- lib/ - Utilities and helpers

Authentication System
The auth system uses a service layer pattern in services/api/auth.js. It handles:
- Login/Register flows
- Password reset functionality 
- User profile management
- Error handling and loading states
- Toast notifications for feedback

Component Architecture
Components are built using Shadcn UI and follow these patterns:
- Card-based layouts for forms
- Loading states during API calls
- Error handling with toast notifications
- Form validation
- Controlled inputs with state management
- Consistent spacing and typography

Layout System
The layout uses:
- max-w-7xl container width
- Tailwind spacing system
- Clean typography hierarchy
- Proper component spacing
- Desktop-optimized design

API Integration
The API layer follows:
- Centralized service files
- Axios for API calls
- Consistent error handling
- Loading state management
- Clean response formatting

Implementation Guidelines

When adding new features:
1. Identify where it fits in the architecture
2. Follow established patterns for that area
3. Use existing components where possible
4. Include proper error handling
5. Add loading states
6. Use toast notifications for feedback
7. Test thoroughly

Key Principles:
- Keep components focused and reusable
- Follow naming conventions
- Include proper error handling
- Add loading states
- Use toast notifications
- Test edge cases

Form Implementation:
- Use Card component wrapper
- Add proper form validation
- Include loading states
- Show error messages
- Use controlled inputs
- Add success/error notifications

API Integration:
- Add endpoints to service layer
- Include error handling
- Use loading states
- Return clean responses
- Add meaningful error messages

Styling:
- Use Tailwind classes
- Follow spacing patterns
- Maintain consistency
- Use Shadcn UI components
- Keep responsive design in mind

Remember:
- Follow existing patterns
- Keep code organized
- Handle errors properly
- Add loading states
- Test thoroughly
- Document complex logic

This structure allows for consistent implementation while maintaining clean architecture. Refer back to existing code as examples when adding new features. 